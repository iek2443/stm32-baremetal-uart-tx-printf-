
5_uart_tx_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c88  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000e10  08000e10  00001e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e24  08000e24  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000e24  08000e24  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000e24  08000e24  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e24  08000e24  00001e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e28  08000e28  00001e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000e2c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000205c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000205c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000205c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c71  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ee  00000000  00000000  00002cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000030f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d7  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d98  00000000  00000000  000032ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013c2  00000000  00000000  00006097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c9b  00000000  00000000  00007459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000110f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a5c  00000000  00000000  00011138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00011b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000df8 	.word	0x08000df8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000df8 	.word	0x08000df8

080001c8 <main>:

// ==============================
// Main Function
// ==============================

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	uart_tx_init();               // Initialize UART transmission (PA2)
 80001cc:	f000 f806 	bl	80001dc <uart_tx_init>

	while (1) {
		printf("HELLO FROM STM32\n");   // Send formatted string over UART
 80001d0:	4801      	ldr	r0, [pc, #4]	@ (80001d8 <main+0x10>)
 80001d2:	f000 fa7d 	bl	80006d0 <puts>
 80001d6:	e7fb      	b.n	80001d0 <main+0x8>
 80001d8:	08000e10 	.word	0x08000e10

080001dc <uart_tx_init>:

// ==============================
// UART Initialization
// ==============================

void uart_tx_init(void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	/********** Configure uart gpio pin **********/

	/* Enable clock access to gpio */
	RCC->AHB1ENR |= GPIOAEN;
 80001e0:	4b20      	ldr	r3, [pc, #128]	@ (8000264 <uart_tx_init+0x88>)
 80001e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000264 <uart_tx_init+0x88>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set PA2 mode to alternate function mode */
	GPIOA->MODER |= (1U << 5);        // MODER2[1]
 80001ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000268 <uart_tx_init+0x8c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000268 <uart_tx_init+0x8c>)
 80001f2:	f043 0320 	orr.w	r3, r3, #32
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 4);       // MODER2[0] â†’ AF mode (10)
 80001f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000268 <uart_tx_init+0x8c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000268 <uart_tx_init+0x8c>)
 80001fe:	f023 0310 	bic.w	r3, r3, #16
 8000202:	6013      	str	r3, [r2, #0]

	/* Set PA2 alternate function type to UART_TX (AF7) */
	GPIOA->AFRL |= (1U << 8);         // AFRL2[0]
 8000204:	4b18      	ldr	r3, [pc, #96]	@ (8000268 <uart_tx_init+0x8c>)
 8000206:	6a1b      	ldr	r3, [r3, #32]
 8000208:	4a17      	ldr	r2, [pc, #92]	@ (8000268 <uart_tx_init+0x8c>)
 800020a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800020e:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL |= (1U << 9);         // AFRL2[1]
 8000210:	4b15      	ldr	r3, [pc, #84]	@ (8000268 <uart_tx_init+0x8c>)
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	4a14      	ldr	r2, [pc, #80]	@ (8000268 <uart_tx_init+0x8c>)
 8000216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800021a:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL |= (1U << 10);        // AFRL2[2]
 800021c:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <uart_tx_init+0x8c>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	4a11      	ldr	r2, [pc, #68]	@ (8000268 <uart_tx_init+0x8c>)
 8000222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000226:	6213      	str	r3, [r2, #32]
	GPIOA->AFRL |= ~(1U << 11);       // AFRL2[3] should be cleared, but this line has incorrect use of '~'
 8000228:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <uart_tx_init+0x8c>)
 800022a:	6a1b      	ldr	r3, [r3, #32]
 800022c:	4a0e      	ldr	r2, [pc, #56]	@ (8000268 <uart_tx_init+0x8c>)
 800022e:	f463 6300 	orn	r3, r3, #2048	@ 0x800
 8000232:	6213      	str	r3, [r2, #32]

	/********** Configure uart module **********/
	/* Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8000234:	4b0b      	ldr	r3, [pc, #44]	@ (8000264 <uart_tx_init+0x88>)
 8000236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000238:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <uart_tx_init+0x88>)
 800023a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800023e:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Configure baudrate */
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000240:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000244:	4909      	ldr	r1, [pc, #36]	@ (800026c <uart_tx_init+0x90>)
 8000246:	480a      	ldr	r0, [pc, #40]	@ (8000270 <uart_tx_init+0x94>)
 8000248:	f000 f838 	bl	80002bc <uart_set_baudrate>

	/* Configure the transfer direction */
	// '=' is used instead of '|=' to reset other CR1 bits and only set TE (transmitter enable)
	USART2->USART_CR1 = (1U << 3);
 800024c:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <uart_tx_init+0x94>)
 800024e:	2208      	movs	r2, #8
 8000250:	60da      	str	r2, [r3, #12]

	/* Enable uart module */
	USART2->USART_CR1 |= (1U << 13);   // UE = 1
 8000252:	4b07      	ldr	r3, [pc, #28]	@ (8000270 <uart_tx_init+0x94>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a06      	ldr	r2, [pc, #24]	@ (8000270 <uart_tx_init+0x94>)
 8000258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800025c:	60d3      	str	r3, [r2, #12]
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020000 	.word	0x40020000
 800026c:	00f42400 	.word	0x00f42400
 8000270:	40004400 	.word	0x40004400

08000274 <uart2_write>:

// ==============================
// Write a character to USART2
// ==============================

void uart2_write(int ch) {
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	/* Wait until transmit data register is empty (TXE) */
	while (!(USART2->USART_SR & (1U << 7))) { }
 800027c:	bf00      	nop
 800027e:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <uart2_write+0x2c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0f9      	beq.n	800027e <uart2_write+0xa>

	/* Write data to the data register */
	USART2->USART_DR = (ch & 0xFF);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a04      	ldr	r2, [pc, #16]	@ (80002a0 <uart2_write+0x2c>)
 800028e:	b2db      	uxtb	r3, r3
 8000290:	6053      	str	r3, [r2, #4]
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40004400 	.word	0x40004400

080002a4 <__io_putchar>:

// ==============================
// Redirect printf() to UART
// ==============================

int __io_putchar(int ch){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	uart2_write(ch);    // Send the character via UART
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f7ff ffe1 	bl	8000274 <uart2_write>
	return(ch);
 80002b2:	687b      	ldr	r3, [r7, #4]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <uart_set_baudrate>:

// ==============================
// Baud Rate Configuration
// ==============================

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
	USARTx->USART_BRR = compute_uart_bd(PeriphClk, BaudRate);
 80002c8:	6879      	ldr	r1, [r7, #4]
 80002ca:	68b8      	ldr	r0, [r7, #8]
 80002cc:	f000 f808 	bl	80002e0 <compute_uart_bd>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	609a      	str	r2, [r3, #8]
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
	// Formula: USARTDIV = Fclk / Baudrate
	return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	085a      	lsrs	r2, r3, #1
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	441a      	add	r2, r3
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f8:	b29b      	uxth	r3, r3
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	b086      	sub	sp, #24
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]
 8000316:	e00a      	b.n	800032e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000318:	f3af 8000 	nop.w
 800031c:	4601      	mov	r1, r0
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	1c5a      	adds	r2, r3, #1
 8000322:	60ba      	str	r2, [r7, #8]
 8000324:	b2ca      	uxtb	r2, r1
 8000326:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	3301      	adds	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	697a      	ldr	r2, [r7, #20]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	429a      	cmp	r2, r3
 8000334:	dbf0      	blt.n	8000318 <_read+0x12>
  }

  return len;
 8000336:	687b      	ldr	r3, [r7, #4]
}
 8000338:	4618      	mov	r0, r3
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e009      	b.n	8000366 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	1c5a      	adds	r2, r3, #1
 8000356:	60ba      	str	r2, [r7, #8]
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffa2 	bl	80002a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	3301      	adds	r3, #1
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	697a      	ldr	r2, [r7, #20]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	429a      	cmp	r2, r3
 800036c:	dbf1      	blt.n	8000352 <_write+0x12>
  }
  return len;
 800036e:	687b      	ldr	r3, [r7, #4]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3718      	adds	r7, #24
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <_close>:

int _close(int file)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003a0:	605a      	str	r2, [r3, #4]
  return 0;
 80003a2:	2300      	movs	r3, #0
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <_isatty>:

int _isatty(int file)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003b8:	2301      	movs	r3, #1
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b085      	sub	sp, #20
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003d2:	2300      	movs	r3, #0
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003e8:	4a14      	ldr	r2, [pc, #80]	@ (800043c <_sbrk+0x5c>)
 80003ea:	4b15      	ldr	r3, [pc, #84]	@ (8000440 <_sbrk+0x60>)
 80003ec:	1ad3      	subs	r3, r2, r3
 80003ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003f4:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <_sbrk+0x64>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d102      	bne.n	8000402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003fc:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <_sbrk+0x64>)
 80003fe:	4a12      	ldr	r2, [pc, #72]	@ (8000448 <_sbrk+0x68>)
 8000400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000402:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <_sbrk+0x64>)
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	693a      	ldr	r2, [r7, #16]
 800040c:	429a      	cmp	r2, r3
 800040e:	d207      	bcs.n	8000420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000410:	f000 f96e 	bl	80006f0 <__errno>
 8000414:	4603      	mov	r3, r0
 8000416:	220c      	movs	r2, #12
 8000418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800041a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800041e:	e009      	b.n	8000434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000420:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <_sbrk+0x64>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000426:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	4a05      	ldr	r2, [pc, #20]	@ (8000444 <_sbrk+0x64>)
 8000430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000432:	68fb      	ldr	r3, [r7, #12]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20020000 	.word	0x20020000
 8000440:	00000400 	.word	0x00000400
 8000444:	20000078 	.word	0x20000078
 8000448:	200001c8 	.word	0x200001c8

0800044c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800044c:	480d      	ldr	r0, [pc, #52]	@ (8000484 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000450:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480c      	ldr	r0, [pc, #48]	@ (8000488 <LoopForever+0x6>)
  ldr r1, =_edata
 8000456:	490d      	ldr	r1, [pc, #52]	@ (800048c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000458:	4a0d      	ldr	r2, [pc, #52]	@ (8000490 <LoopForever+0xe>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800046c:	4c0a      	ldr	r4, [pc, #40]	@ (8000498 <LoopForever+0x16>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047a:	f000 f93f 	bl	80006fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff fea3 	bl	80001c8 <main>

08000482 <LoopForever>:

LoopForever:
  b LoopForever
 8000482:	e7fe      	b.n	8000482 <LoopForever>
  ldr   r0, =_estack
 8000484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800048c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000490:	08000e2c 	.word	0x08000e2c
  ldr r2, =_sbss
 8000494:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000498:	200001c8 	.word	0x200001c8

0800049c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800049c:	e7fe      	b.n	800049c <ADC_IRQHandler>
	...

080004a0 <std>:
 80004a0:	2300      	movs	r3, #0
 80004a2:	b510      	push	{r4, lr}
 80004a4:	4604      	mov	r4, r0
 80004a6:	e9c0 3300 	strd	r3, r3, [r0]
 80004aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004ae:	6083      	str	r3, [r0, #8]
 80004b0:	8181      	strh	r1, [r0, #12]
 80004b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80004b4:	81c2      	strh	r2, [r0, #14]
 80004b6:	6183      	str	r3, [r0, #24]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2208      	movs	r2, #8
 80004bc:	305c      	adds	r0, #92	@ 0x5c
 80004be:	f000 f90f 	bl	80006e0 <memset>
 80004c2:	4b0d      	ldr	r3, [pc, #52]	@ (80004f8 <std+0x58>)
 80004c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80004c6:	4b0d      	ldr	r3, [pc, #52]	@ (80004fc <std+0x5c>)
 80004c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80004ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <std+0x60>)
 80004cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <std+0x64>)
 80004d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80004d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000508 <std+0x68>)
 80004d4:	6224      	str	r4, [r4, #32]
 80004d6:	429c      	cmp	r4, r3
 80004d8:	d006      	beq.n	80004e8 <std+0x48>
 80004da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80004de:	4294      	cmp	r4, r2
 80004e0:	d002      	beq.n	80004e8 <std+0x48>
 80004e2:	33d0      	adds	r3, #208	@ 0xd0
 80004e4:	429c      	cmp	r4, r3
 80004e6:	d105      	bne.n	80004f4 <std+0x54>
 80004e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80004ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004f0:	f000 b928 	b.w	8000744 <__retarget_lock_init_recursive>
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	bf00      	nop
 80004f8:	08000a01 	.word	0x08000a01
 80004fc:	08000a23 	.word	0x08000a23
 8000500:	08000a5b 	.word	0x08000a5b
 8000504:	08000a7f 	.word	0x08000a7f
 8000508:	2000007c 	.word	0x2000007c

0800050c <stdio_exit_handler>:
 800050c:	4a02      	ldr	r2, [pc, #8]	@ (8000518 <stdio_exit_handler+0xc>)
 800050e:	4903      	ldr	r1, [pc, #12]	@ (800051c <stdio_exit_handler+0x10>)
 8000510:	4803      	ldr	r0, [pc, #12]	@ (8000520 <stdio_exit_handler+0x14>)
 8000512:	f000 b869 	b.w	80005e8 <_fwalk_sglue>
 8000516:	bf00      	nop
 8000518:	20000000 	.word	0x20000000
 800051c:	08000999 	.word	0x08000999
 8000520:	20000010 	.word	0x20000010

08000524 <cleanup_stdio>:
 8000524:	6841      	ldr	r1, [r0, #4]
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <cleanup_stdio+0x34>)
 8000528:	4299      	cmp	r1, r3
 800052a:	b510      	push	{r4, lr}
 800052c:	4604      	mov	r4, r0
 800052e:	d001      	beq.n	8000534 <cleanup_stdio+0x10>
 8000530:	f000 fa32 	bl	8000998 <_fflush_r>
 8000534:	68a1      	ldr	r1, [r4, #8]
 8000536:	4b09      	ldr	r3, [pc, #36]	@ (800055c <cleanup_stdio+0x38>)
 8000538:	4299      	cmp	r1, r3
 800053a:	d002      	beq.n	8000542 <cleanup_stdio+0x1e>
 800053c:	4620      	mov	r0, r4
 800053e:	f000 fa2b 	bl	8000998 <_fflush_r>
 8000542:	68e1      	ldr	r1, [r4, #12]
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <cleanup_stdio+0x3c>)
 8000546:	4299      	cmp	r1, r3
 8000548:	d004      	beq.n	8000554 <cleanup_stdio+0x30>
 800054a:	4620      	mov	r0, r4
 800054c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000550:	f000 ba22 	b.w	8000998 <_fflush_r>
 8000554:	bd10      	pop	{r4, pc}
 8000556:	bf00      	nop
 8000558:	2000007c 	.word	0x2000007c
 800055c:	200000e4 	.word	0x200000e4
 8000560:	2000014c 	.word	0x2000014c

08000564 <global_stdio_init.part.0>:
 8000564:	b510      	push	{r4, lr}
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <global_stdio_init.part.0+0x30>)
 8000568:	4c0b      	ldr	r4, [pc, #44]	@ (8000598 <global_stdio_init.part.0+0x34>)
 800056a:	4a0c      	ldr	r2, [pc, #48]	@ (800059c <global_stdio_init.part.0+0x38>)
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	4620      	mov	r0, r4
 8000570:	2200      	movs	r2, #0
 8000572:	2104      	movs	r1, #4
 8000574:	f7ff ff94 	bl	80004a0 <std>
 8000578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800057c:	2201      	movs	r2, #1
 800057e:	2109      	movs	r1, #9
 8000580:	f7ff ff8e 	bl	80004a0 <std>
 8000584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000588:	2202      	movs	r2, #2
 800058a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800058e:	2112      	movs	r1, #18
 8000590:	f7ff bf86 	b.w	80004a0 <std>
 8000594:	200001b4 	.word	0x200001b4
 8000598:	2000007c 	.word	0x2000007c
 800059c:	0800050d 	.word	0x0800050d

080005a0 <__sfp_lock_acquire>:
 80005a0:	4801      	ldr	r0, [pc, #4]	@ (80005a8 <__sfp_lock_acquire+0x8>)
 80005a2:	f000 b8d0 	b.w	8000746 <__retarget_lock_acquire_recursive>
 80005a6:	bf00      	nop
 80005a8:	200001b9 	.word	0x200001b9

080005ac <__sfp_lock_release>:
 80005ac:	4801      	ldr	r0, [pc, #4]	@ (80005b4 <__sfp_lock_release+0x8>)
 80005ae:	f000 b8cb 	b.w	8000748 <__retarget_lock_release_recursive>
 80005b2:	bf00      	nop
 80005b4:	200001b9 	.word	0x200001b9

080005b8 <__sinit>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	4604      	mov	r4, r0
 80005bc:	f7ff fff0 	bl	80005a0 <__sfp_lock_acquire>
 80005c0:	6a23      	ldr	r3, [r4, #32]
 80005c2:	b11b      	cbz	r3, 80005cc <__sinit+0x14>
 80005c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005c8:	f7ff bff0 	b.w	80005ac <__sfp_lock_release>
 80005cc:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <__sinit+0x28>)
 80005ce:	6223      	str	r3, [r4, #32]
 80005d0:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <__sinit+0x2c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f5      	bne.n	80005c4 <__sinit+0xc>
 80005d8:	f7ff ffc4 	bl	8000564 <global_stdio_init.part.0>
 80005dc:	e7f2      	b.n	80005c4 <__sinit+0xc>
 80005de:	bf00      	nop
 80005e0:	08000525 	.word	0x08000525
 80005e4:	200001b4 	.word	0x200001b4

080005e8 <_fwalk_sglue>:
 80005e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005ec:	4607      	mov	r7, r0
 80005ee:	4688      	mov	r8, r1
 80005f0:	4614      	mov	r4, r2
 80005f2:	2600      	movs	r6, #0
 80005f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005f8:	f1b9 0901 	subs.w	r9, r9, #1
 80005fc:	d505      	bpl.n	800060a <_fwalk_sglue+0x22>
 80005fe:	6824      	ldr	r4, [r4, #0]
 8000600:	2c00      	cmp	r4, #0
 8000602:	d1f7      	bne.n	80005f4 <_fwalk_sglue+0xc>
 8000604:	4630      	mov	r0, r6
 8000606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800060a:	89ab      	ldrh	r3, [r5, #12]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d907      	bls.n	8000620 <_fwalk_sglue+0x38>
 8000610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000614:	3301      	adds	r3, #1
 8000616:	d003      	beq.n	8000620 <_fwalk_sglue+0x38>
 8000618:	4629      	mov	r1, r5
 800061a:	4638      	mov	r0, r7
 800061c:	47c0      	blx	r8
 800061e:	4306      	orrs	r6, r0
 8000620:	3568      	adds	r5, #104	@ 0x68
 8000622:	e7e9      	b.n	80005f8 <_fwalk_sglue+0x10>

08000624 <_puts_r>:
 8000624:	6a03      	ldr	r3, [r0, #32]
 8000626:	b570      	push	{r4, r5, r6, lr}
 8000628:	6884      	ldr	r4, [r0, #8]
 800062a:	4605      	mov	r5, r0
 800062c:	460e      	mov	r6, r1
 800062e:	b90b      	cbnz	r3, 8000634 <_puts_r+0x10>
 8000630:	f7ff ffc2 	bl	80005b8 <__sinit>
 8000634:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000636:	07db      	lsls	r3, r3, #31
 8000638:	d405      	bmi.n	8000646 <_puts_r+0x22>
 800063a:	89a3      	ldrh	r3, [r4, #12]
 800063c:	0598      	lsls	r0, r3, #22
 800063e:	d402      	bmi.n	8000646 <_puts_r+0x22>
 8000640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000642:	f000 f880 	bl	8000746 <__retarget_lock_acquire_recursive>
 8000646:	89a3      	ldrh	r3, [r4, #12]
 8000648:	0719      	lsls	r1, r3, #28
 800064a:	d502      	bpl.n	8000652 <_puts_r+0x2e>
 800064c:	6923      	ldr	r3, [r4, #16]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d135      	bne.n	80006be <_puts_r+0x9a>
 8000652:	4621      	mov	r1, r4
 8000654:	4628      	mov	r0, r5
 8000656:	f000 fa55 	bl	8000b04 <__swsetup_r>
 800065a:	b380      	cbz	r0, 80006be <_puts_r+0x9a>
 800065c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000662:	07da      	lsls	r2, r3, #31
 8000664:	d405      	bmi.n	8000672 <_puts_r+0x4e>
 8000666:	89a3      	ldrh	r3, [r4, #12]
 8000668:	059b      	lsls	r3, r3, #22
 800066a:	d402      	bmi.n	8000672 <_puts_r+0x4e>
 800066c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800066e:	f000 f86b 	bl	8000748 <__retarget_lock_release_recursive>
 8000672:	4628      	mov	r0, r5
 8000674:	bd70      	pop	{r4, r5, r6, pc}
 8000676:	2b00      	cmp	r3, #0
 8000678:	da04      	bge.n	8000684 <_puts_r+0x60>
 800067a:	69a2      	ldr	r2, [r4, #24]
 800067c:	429a      	cmp	r2, r3
 800067e:	dc17      	bgt.n	80006b0 <_puts_r+0x8c>
 8000680:	290a      	cmp	r1, #10
 8000682:	d015      	beq.n	80006b0 <_puts_r+0x8c>
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	6022      	str	r2, [r4, #0]
 800068a:	7019      	strb	r1, [r3, #0]
 800068c:	68a3      	ldr	r3, [r4, #8]
 800068e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000692:	3b01      	subs	r3, #1
 8000694:	60a3      	str	r3, [r4, #8]
 8000696:	2900      	cmp	r1, #0
 8000698:	d1ed      	bne.n	8000676 <_puts_r+0x52>
 800069a:	2b00      	cmp	r3, #0
 800069c:	da11      	bge.n	80006c2 <_puts_r+0x9e>
 800069e:	4622      	mov	r2, r4
 80006a0:	210a      	movs	r1, #10
 80006a2:	4628      	mov	r0, r5
 80006a4:	f000 f9ef 	bl	8000a86 <__swbuf_r>
 80006a8:	3001      	adds	r0, #1
 80006aa:	d0d7      	beq.n	800065c <_puts_r+0x38>
 80006ac:	250a      	movs	r5, #10
 80006ae:	e7d7      	b.n	8000660 <_puts_r+0x3c>
 80006b0:	4622      	mov	r2, r4
 80006b2:	4628      	mov	r0, r5
 80006b4:	f000 f9e7 	bl	8000a86 <__swbuf_r>
 80006b8:	3001      	adds	r0, #1
 80006ba:	d1e7      	bne.n	800068c <_puts_r+0x68>
 80006bc:	e7ce      	b.n	800065c <_puts_r+0x38>
 80006be:	3e01      	subs	r6, #1
 80006c0:	e7e4      	b.n	800068c <_puts_r+0x68>
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	6022      	str	r2, [r4, #0]
 80006c8:	220a      	movs	r2, #10
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	e7ee      	b.n	80006ac <_puts_r+0x88>
	...

080006d0 <puts>:
 80006d0:	4b02      	ldr	r3, [pc, #8]	@ (80006dc <puts+0xc>)
 80006d2:	4601      	mov	r1, r0
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	f7ff bfa5 	b.w	8000624 <_puts_r>
 80006da:	bf00      	nop
 80006dc:	2000000c 	.word	0x2000000c

080006e0 <memset>:
 80006e0:	4402      	add	r2, r0
 80006e2:	4603      	mov	r3, r0
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d100      	bne.n	80006ea <memset+0xa>
 80006e8:	4770      	bx	lr
 80006ea:	f803 1b01 	strb.w	r1, [r3], #1
 80006ee:	e7f9      	b.n	80006e4 <memset+0x4>

080006f0 <__errno>:
 80006f0:	4b01      	ldr	r3, [pc, #4]	@ (80006f8 <__errno+0x8>)
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	2000000c 	.word	0x2000000c

080006fc <__libc_init_array>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000734 <__libc_init_array+0x38>)
 8000700:	4c0d      	ldr	r4, [pc, #52]	@ (8000738 <__libc_init_array+0x3c>)
 8000702:	1b64      	subs	r4, r4, r5
 8000704:	10a4      	asrs	r4, r4, #2
 8000706:	2600      	movs	r6, #0
 8000708:	42a6      	cmp	r6, r4
 800070a:	d109      	bne.n	8000720 <__libc_init_array+0x24>
 800070c:	4d0b      	ldr	r5, [pc, #44]	@ (800073c <__libc_init_array+0x40>)
 800070e:	4c0c      	ldr	r4, [pc, #48]	@ (8000740 <__libc_init_array+0x44>)
 8000710:	f000 fb72 	bl	8000df8 <_init>
 8000714:	1b64      	subs	r4, r4, r5
 8000716:	10a4      	asrs	r4, r4, #2
 8000718:	2600      	movs	r6, #0
 800071a:	42a6      	cmp	r6, r4
 800071c:	d105      	bne.n	800072a <__libc_init_array+0x2e>
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f855 3b04 	ldr.w	r3, [r5], #4
 8000724:	4798      	blx	r3
 8000726:	3601      	adds	r6, #1
 8000728:	e7ee      	b.n	8000708 <__libc_init_array+0xc>
 800072a:	f855 3b04 	ldr.w	r3, [r5], #4
 800072e:	4798      	blx	r3
 8000730:	3601      	adds	r6, #1
 8000732:	e7f2      	b.n	800071a <__libc_init_array+0x1e>
 8000734:	08000e24 	.word	0x08000e24
 8000738:	08000e24 	.word	0x08000e24
 800073c:	08000e24 	.word	0x08000e24
 8000740:	08000e28 	.word	0x08000e28

08000744 <__retarget_lock_init_recursive>:
 8000744:	4770      	bx	lr

08000746 <__retarget_lock_acquire_recursive>:
 8000746:	4770      	bx	lr

08000748 <__retarget_lock_release_recursive>:
 8000748:	4770      	bx	lr
	...

0800074c <sbrk_aligned>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	4e0f      	ldr	r6, [pc, #60]	@ (800078c <sbrk_aligned+0x40>)
 8000750:	460c      	mov	r4, r1
 8000752:	6831      	ldr	r1, [r6, #0]
 8000754:	4605      	mov	r5, r0
 8000756:	b911      	cbnz	r1, 800075e <sbrk_aligned+0x12>
 8000758:	f000 fac0 	bl	8000cdc <_sbrk_r>
 800075c:	6030      	str	r0, [r6, #0]
 800075e:	4621      	mov	r1, r4
 8000760:	4628      	mov	r0, r5
 8000762:	f000 fabb 	bl	8000cdc <_sbrk_r>
 8000766:	1c43      	adds	r3, r0, #1
 8000768:	d103      	bne.n	8000772 <sbrk_aligned+0x26>
 800076a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800076e:	4620      	mov	r0, r4
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	1cc4      	adds	r4, r0, #3
 8000774:	f024 0403 	bic.w	r4, r4, #3
 8000778:	42a0      	cmp	r0, r4
 800077a:	d0f8      	beq.n	800076e <sbrk_aligned+0x22>
 800077c:	1a21      	subs	r1, r4, r0
 800077e:	4628      	mov	r0, r5
 8000780:	f000 faac 	bl	8000cdc <_sbrk_r>
 8000784:	3001      	adds	r0, #1
 8000786:	d1f2      	bne.n	800076e <sbrk_aligned+0x22>
 8000788:	e7ef      	b.n	800076a <sbrk_aligned+0x1e>
 800078a:	bf00      	nop
 800078c:	200001bc 	.word	0x200001bc

08000790 <_malloc_r>:
 8000790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000794:	1ccd      	adds	r5, r1, #3
 8000796:	f025 0503 	bic.w	r5, r5, #3
 800079a:	3508      	adds	r5, #8
 800079c:	2d0c      	cmp	r5, #12
 800079e:	bf38      	it	cc
 80007a0:	250c      	movcc	r5, #12
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	4606      	mov	r6, r0
 80007a6:	db01      	blt.n	80007ac <_malloc_r+0x1c>
 80007a8:	42a9      	cmp	r1, r5
 80007aa:	d904      	bls.n	80007b6 <_malloc_r+0x26>
 80007ac:	230c      	movs	r3, #12
 80007ae:	6033      	str	r3, [r6, #0]
 80007b0:	2000      	movs	r0, #0
 80007b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800088c <_malloc_r+0xfc>
 80007ba:	f000 f915 	bl	80009e8 <__malloc_lock>
 80007be:	f8d8 3000 	ldr.w	r3, [r8]
 80007c2:	461c      	mov	r4, r3
 80007c4:	bb44      	cbnz	r4, 8000818 <_malloc_r+0x88>
 80007c6:	4629      	mov	r1, r5
 80007c8:	4630      	mov	r0, r6
 80007ca:	f7ff ffbf 	bl	800074c <sbrk_aligned>
 80007ce:	1c43      	adds	r3, r0, #1
 80007d0:	4604      	mov	r4, r0
 80007d2:	d158      	bne.n	8000886 <_malloc_r+0xf6>
 80007d4:	f8d8 4000 	ldr.w	r4, [r8]
 80007d8:	4627      	mov	r7, r4
 80007da:	2f00      	cmp	r7, #0
 80007dc:	d143      	bne.n	8000866 <_malloc_r+0xd6>
 80007de:	2c00      	cmp	r4, #0
 80007e0:	d04b      	beq.n	800087a <_malloc_r+0xea>
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	4639      	mov	r1, r7
 80007e6:	4630      	mov	r0, r6
 80007e8:	eb04 0903 	add.w	r9, r4, r3
 80007ec:	f000 fa76 	bl	8000cdc <_sbrk_r>
 80007f0:	4581      	cmp	r9, r0
 80007f2:	d142      	bne.n	800087a <_malloc_r+0xea>
 80007f4:	6821      	ldr	r1, [r4, #0]
 80007f6:	1a6d      	subs	r5, r5, r1
 80007f8:	4629      	mov	r1, r5
 80007fa:	4630      	mov	r0, r6
 80007fc:	f7ff ffa6 	bl	800074c <sbrk_aligned>
 8000800:	3001      	adds	r0, #1
 8000802:	d03a      	beq.n	800087a <_malloc_r+0xea>
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	442b      	add	r3, r5
 8000808:	6023      	str	r3, [r4, #0]
 800080a:	f8d8 3000 	ldr.w	r3, [r8]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	bb62      	cbnz	r2, 800086c <_malloc_r+0xdc>
 8000812:	f8c8 7000 	str.w	r7, [r8]
 8000816:	e00f      	b.n	8000838 <_malloc_r+0xa8>
 8000818:	6822      	ldr	r2, [r4, #0]
 800081a:	1b52      	subs	r2, r2, r5
 800081c:	d420      	bmi.n	8000860 <_malloc_r+0xd0>
 800081e:	2a0b      	cmp	r2, #11
 8000820:	d917      	bls.n	8000852 <_malloc_r+0xc2>
 8000822:	1961      	adds	r1, r4, r5
 8000824:	42a3      	cmp	r3, r4
 8000826:	6025      	str	r5, [r4, #0]
 8000828:	bf18      	it	ne
 800082a:	6059      	strne	r1, [r3, #4]
 800082c:	6863      	ldr	r3, [r4, #4]
 800082e:	bf08      	it	eq
 8000830:	f8c8 1000 	streq.w	r1, [r8]
 8000834:	5162      	str	r2, [r4, r5]
 8000836:	604b      	str	r3, [r1, #4]
 8000838:	4630      	mov	r0, r6
 800083a:	f000 f8db 	bl	80009f4 <__malloc_unlock>
 800083e:	f104 000b 	add.w	r0, r4, #11
 8000842:	1d23      	adds	r3, r4, #4
 8000844:	f020 0007 	bic.w	r0, r0, #7
 8000848:	1ac2      	subs	r2, r0, r3
 800084a:	bf1c      	itt	ne
 800084c:	1a1b      	subne	r3, r3, r0
 800084e:	50a3      	strne	r3, [r4, r2]
 8000850:	e7af      	b.n	80007b2 <_malloc_r+0x22>
 8000852:	6862      	ldr	r2, [r4, #4]
 8000854:	42a3      	cmp	r3, r4
 8000856:	bf0c      	ite	eq
 8000858:	f8c8 2000 	streq.w	r2, [r8]
 800085c:	605a      	strne	r2, [r3, #4]
 800085e:	e7eb      	b.n	8000838 <_malloc_r+0xa8>
 8000860:	4623      	mov	r3, r4
 8000862:	6864      	ldr	r4, [r4, #4]
 8000864:	e7ae      	b.n	80007c4 <_malloc_r+0x34>
 8000866:	463c      	mov	r4, r7
 8000868:	687f      	ldr	r7, [r7, #4]
 800086a:	e7b6      	b.n	80007da <_malloc_r+0x4a>
 800086c:	461a      	mov	r2, r3
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	42a3      	cmp	r3, r4
 8000872:	d1fb      	bne.n	800086c <_malloc_r+0xdc>
 8000874:	2300      	movs	r3, #0
 8000876:	6053      	str	r3, [r2, #4]
 8000878:	e7de      	b.n	8000838 <_malloc_r+0xa8>
 800087a:	230c      	movs	r3, #12
 800087c:	6033      	str	r3, [r6, #0]
 800087e:	4630      	mov	r0, r6
 8000880:	f000 f8b8 	bl	80009f4 <__malloc_unlock>
 8000884:	e794      	b.n	80007b0 <_malloc_r+0x20>
 8000886:	6005      	str	r5, [r0, #0]
 8000888:	e7d6      	b.n	8000838 <_malloc_r+0xa8>
 800088a:	bf00      	nop
 800088c:	200001c0 	.word	0x200001c0

08000890 <__sflush_r>:
 8000890:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000898:	0716      	lsls	r6, r2, #28
 800089a:	4605      	mov	r5, r0
 800089c:	460c      	mov	r4, r1
 800089e:	d454      	bmi.n	800094a <__sflush_r+0xba>
 80008a0:	684b      	ldr	r3, [r1, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	dc02      	bgt.n	80008ac <__sflush_r+0x1c>
 80008a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dd48      	ble.n	800093e <__sflush_r+0xae>
 80008ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	d045      	beq.n	800093e <__sflush_r+0xae>
 80008b2:	2300      	movs	r3, #0
 80008b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80008b8:	682f      	ldr	r7, [r5, #0]
 80008ba:	6a21      	ldr	r1, [r4, #32]
 80008bc:	602b      	str	r3, [r5, #0]
 80008be:	d030      	beq.n	8000922 <__sflush_r+0x92>
 80008c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80008c2:	89a3      	ldrh	r3, [r4, #12]
 80008c4:	0759      	lsls	r1, r3, #29
 80008c6:	d505      	bpl.n	80008d4 <__sflush_r+0x44>
 80008c8:	6863      	ldr	r3, [r4, #4]
 80008ca:	1ad2      	subs	r2, r2, r3
 80008cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80008ce:	b10b      	cbz	r3, 80008d4 <__sflush_r+0x44>
 80008d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80008d2:	1ad2      	subs	r2, r2, r3
 80008d4:	2300      	movs	r3, #0
 80008d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80008d8:	6a21      	ldr	r1, [r4, #32]
 80008da:	4628      	mov	r0, r5
 80008dc:	47b0      	blx	r6
 80008de:	1c43      	adds	r3, r0, #1
 80008e0:	89a3      	ldrh	r3, [r4, #12]
 80008e2:	d106      	bne.n	80008f2 <__sflush_r+0x62>
 80008e4:	6829      	ldr	r1, [r5, #0]
 80008e6:	291d      	cmp	r1, #29
 80008e8:	d82b      	bhi.n	8000942 <__sflush_r+0xb2>
 80008ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <__sflush_r+0x104>)
 80008ec:	40ca      	lsrs	r2, r1
 80008ee:	07d6      	lsls	r6, r2, #31
 80008f0:	d527      	bpl.n	8000942 <__sflush_r+0xb2>
 80008f2:	2200      	movs	r2, #0
 80008f4:	6062      	str	r2, [r4, #4]
 80008f6:	04d9      	lsls	r1, r3, #19
 80008f8:	6922      	ldr	r2, [r4, #16]
 80008fa:	6022      	str	r2, [r4, #0]
 80008fc:	d504      	bpl.n	8000908 <__sflush_r+0x78>
 80008fe:	1c42      	adds	r2, r0, #1
 8000900:	d101      	bne.n	8000906 <__sflush_r+0x76>
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	b903      	cbnz	r3, 8000908 <__sflush_r+0x78>
 8000906:	6560      	str	r0, [r4, #84]	@ 0x54
 8000908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800090a:	602f      	str	r7, [r5, #0]
 800090c:	b1b9      	cbz	r1, 800093e <__sflush_r+0xae>
 800090e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000912:	4299      	cmp	r1, r3
 8000914:	d002      	beq.n	800091c <__sflush_r+0x8c>
 8000916:	4628      	mov	r0, r5
 8000918:	f000 fa24 	bl	8000d64 <_free_r>
 800091c:	2300      	movs	r3, #0
 800091e:	6363      	str	r3, [r4, #52]	@ 0x34
 8000920:	e00d      	b.n	800093e <__sflush_r+0xae>
 8000922:	2301      	movs	r3, #1
 8000924:	4628      	mov	r0, r5
 8000926:	47b0      	blx	r6
 8000928:	4602      	mov	r2, r0
 800092a:	1c50      	adds	r0, r2, #1
 800092c:	d1c9      	bne.n	80008c2 <__sflush_r+0x32>
 800092e:	682b      	ldr	r3, [r5, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0c6      	beq.n	80008c2 <__sflush_r+0x32>
 8000934:	2b1d      	cmp	r3, #29
 8000936:	d001      	beq.n	800093c <__sflush_r+0xac>
 8000938:	2b16      	cmp	r3, #22
 800093a:	d11e      	bne.n	800097a <__sflush_r+0xea>
 800093c:	602f      	str	r7, [r5, #0]
 800093e:	2000      	movs	r0, #0
 8000940:	e022      	b.n	8000988 <__sflush_r+0xf8>
 8000942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000946:	b21b      	sxth	r3, r3
 8000948:	e01b      	b.n	8000982 <__sflush_r+0xf2>
 800094a:	690f      	ldr	r7, [r1, #16]
 800094c:	2f00      	cmp	r7, #0
 800094e:	d0f6      	beq.n	800093e <__sflush_r+0xae>
 8000950:	0793      	lsls	r3, r2, #30
 8000952:	680e      	ldr	r6, [r1, #0]
 8000954:	bf08      	it	eq
 8000956:	694b      	ldreq	r3, [r1, #20]
 8000958:	600f      	str	r7, [r1, #0]
 800095a:	bf18      	it	ne
 800095c:	2300      	movne	r3, #0
 800095e:	eba6 0807 	sub.w	r8, r6, r7
 8000962:	608b      	str	r3, [r1, #8]
 8000964:	f1b8 0f00 	cmp.w	r8, #0
 8000968:	dde9      	ble.n	800093e <__sflush_r+0xae>
 800096a:	6a21      	ldr	r1, [r4, #32]
 800096c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800096e:	4643      	mov	r3, r8
 8000970:	463a      	mov	r2, r7
 8000972:	4628      	mov	r0, r5
 8000974:	47b0      	blx	r6
 8000976:	2800      	cmp	r0, #0
 8000978:	dc08      	bgt.n	800098c <__sflush_r+0xfc>
 800097a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800097e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000982:	81a3      	strh	r3, [r4, #12]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800098c:	4407      	add	r7, r0
 800098e:	eba8 0800 	sub.w	r8, r8, r0
 8000992:	e7e7      	b.n	8000964 <__sflush_r+0xd4>
 8000994:	20400001 	.word	0x20400001

08000998 <_fflush_r>:
 8000998:	b538      	push	{r3, r4, r5, lr}
 800099a:	690b      	ldr	r3, [r1, #16]
 800099c:	4605      	mov	r5, r0
 800099e:	460c      	mov	r4, r1
 80009a0:	b913      	cbnz	r3, 80009a8 <_fflush_r+0x10>
 80009a2:	2500      	movs	r5, #0
 80009a4:	4628      	mov	r0, r5
 80009a6:	bd38      	pop	{r3, r4, r5, pc}
 80009a8:	b118      	cbz	r0, 80009b2 <_fflush_r+0x1a>
 80009aa:	6a03      	ldr	r3, [r0, #32]
 80009ac:	b90b      	cbnz	r3, 80009b2 <_fflush_r+0x1a>
 80009ae:	f7ff fe03 	bl	80005b8 <__sinit>
 80009b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f3      	beq.n	80009a2 <_fflush_r+0xa>
 80009ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80009bc:	07d0      	lsls	r0, r2, #31
 80009be:	d404      	bmi.n	80009ca <_fflush_r+0x32>
 80009c0:	0599      	lsls	r1, r3, #22
 80009c2:	d402      	bmi.n	80009ca <_fflush_r+0x32>
 80009c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009c6:	f7ff febe 	bl	8000746 <__retarget_lock_acquire_recursive>
 80009ca:	4628      	mov	r0, r5
 80009cc:	4621      	mov	r1, r4
 80009ce:	f7ff ff5f 	bl	8000890 <__sflush_r>
 80009d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80009d4:	07da      	lsls	r2, r3, #31
 80009d6:	4605      	mov	r5, r0
 80009d8:	d4e4      	bmi.n	80009a4 <_fflush_r+0xc>
 80009da:	89a3      	ldrh	r3, [r4, #12]
 80009dc:	059b      	lsls	r3, r3, #22
 80009de:	d4e1      	bmi.n	80009a4 <_fflush_r+0xc>
 80009e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009e2:	f7ff feb1 	bl	8000748 <__retarget_lock_release_recursive>
 80009e6:	e7dd      	b.n	80009a4 <_fflush_r+0xc>

080009e8 <__malloc_lock>:
 80009e8:	4801      	ldr	r0, [pc, #4]	@ (80009f0 <__malloc_lock+0x8>)
 80009ea:	f7ff beac 	b.w	8000746 <__retarget_lock_acquire_recursive>
 80009ee:	bf00      	nop
 80009f0:	200001b8 	.word	0x200001b8

080009f4 <__malloc_unlock>:
 80009f4:	4801      	ldr	r0, [pc, #4]	@ (80009fc <__malloc_unlock+0x8>)
 80009f6:	f7ff bea7 	b.w	8000748 <__retarget_lock_release_recursive>
 80009fa:	bf00      	nop
 80009fc:	200001b8 	.word	0x200001b8

08000a00 <__sread>:
 8000a00:	b510      	push	{r4, lr}
 8000a02:	460c      	mov	r4, r1
 8000a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a08:	f000 f956 	bl	8000cb8 <_read_r>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	bfab      	itete	ge
 8000a10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a12:	89a3      	ldrhlt	r3, [r4, #12]
 8000a14:	181b      	addge	r3, r3, r0
 8000a16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a1a:	bfac      	ite	ge
 8000a1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a1e:	81a3      	strhlt	r3, [r4, #12]
 8000a20:	bd10      	pop	{r4, pc}

08000a22 <__swrite>:
 8000a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a26:	461f      	mov	r7, r3
 8000a28:	898b      	ldrh	r3, [r1, #12]
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	460c      	mov	r4, r1
 8000a30:	4616      	mov	r6, r2
 8000a32:	d505      	bpl.n	8000a40 <__swrite+0x1e>
 8000a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a38:	2302      	movs	r3, #2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f000 f92a 	bl	8000c94 <_lseek_r>
 8000a40:	89a3      	ldrh	r3, [r4, #12]
 8000a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a4a:	81a3      	strh	r3, [r4, #12]
 8000a4c:	4632      	mov	r2, r6
 8000a4e:	463b      	mov	r3, r7
 8000a50:	4628      	mov	r0, r5
 8000a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a56:	f000 b951 	b.w	8000cfc <_write_r>

08000a5a <__sseek>:
 8000a5a:	b510      	push	{r4, lr}
 8000a5c:	460c      	mov	r4, r1
 8000a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a62:	f000 f917 	bl	8000c94 <_lseek_r>
 8000a66:	1c43      	adds	r3, r0, #1
 8000a68:	89a3      	ldrh	r3, [r4, #12]
 8000a6a:	bf15      	itete	ne
 8000a6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a76:	81a3      	strheq	r3, [r4, #12]
 8000a78:	bf18      	it	ne
 8000a7a:	81a3      	strhne	r3, [r4, #12]
 8000a7c:	bd10      	pop	{r4, pc}

08000a7e <__sclose>:
 8000a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a82:	f000 b94d 	b.w	8000d20 <_close_r>

08000a86 <__swbuf_r>:
 8000a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a88:	460e      	mov	r6, r1
 8000a8a:	4614      	mov	r4, r2
 8000a8c:	4605      	mov	r5, r0
 8000a8e:	b118      	cbz	r0, 8000a98 <__swbuf_r+0x12>
 8000a90:	6a03      	ldr	r3, [r0, #32]
 8000a92:	b90b      	cbnz	r3, 8000a98 <__swbuf_r+0x12>
 8000a94:	f7ff fd90 	bl	80005b8 <__sinit>
 8000a98:	69a3      	ldr	r3, [r4, #24]
 8000a9a:	60a3      	str	r3, [r4, #8]
 8000a9c:	89a3      	ldrh	r3, [r4, #12]
 8000a9e:	071a      	lsls	r2, r3, #28
 8000aa0:	d501      	bpl.n	8000aa6 <__swbuf_r+0x20>
 8000aa2:	6923      	ldr	r3, [r4, #16]
 8000aa4:	b943      	cbnz	r3, 8000ab8 <__swbuf_r+0x32>
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	f000 f82b 	bl	8000b04 <__swsetup_r>
 8000aae:	b118      	cbz	r0, 8000ab8 <__swbuf_r+0x32>
 8000ab0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	6922      	ldr	r2, [r4, #16]
 8000abc:	1a98      	subs	r0, r3, r2
 8000abe:	6963      	ldr	r3, [r4, #20]
 8000ac0:	b2f6      	uxtb	r6, r6
 8000ac2:	4283      	cmp	r3, r0
 8000ac4:	4637      	mov	r7, r6
 8000ac6:	dc05      	bgt.n	8000ad4 <__swbuf_r+0x4e>
 8000ac8:	4621      	mov	r1, r4
 8000aca:	4628      	mov	r0, r5
 8000acc:	f7ff ff64 	bl	8000998 <_fflush_r>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d1ed      	bne.n	8000ab0 <__swbuf_r+0x2a>
 8000ad4:	68a3      	ldr	r3, [r4, #8]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	60a3      	str	r3, [r4, #8]
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	6022      	str	r2, [r4, #0]
 8000ae0:	701e      	strb	r6, [r3, #0]
 8000ae2:	6962      	ldr	r2, [r4, #20]
 8000ae4:	1c43      	adds	r3, r0, #1
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__swbuf_r+0x6e>
 8000aea:	89a3      	ldrh	r3, [r4, #12]
 8000aec:	07db      	lsls	r3, r3, #31
 8000aee:	d5e1      	bpl.n	8000ab4 <__swbuf_r+0x2e>
 8000af0:	2e0a      	cmp	r6, #10
 8000af2:	d1df      	bne.n	8000ab4 <__swbuf_r+0x2e>
 8000af4:	4621      	mov	r1, r4
 8000af6:	4628      	mov	r0, r5
 8000af8:	f7ff ff4e 	bl	8000998 <_fflush_r>
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d0d9      	beq.n	8000ab4 <__swbuf_r+0x2e>
 8000b00:	e7d6      	b.n	8000ab0 <__swbuf_r+0x2a>
	...

08000b04 <__swsetup_r>:
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <__swsetup_r+0xa8>)
 8000b08:	4605      	mov	r5, r0
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	460c      	mov	r4, r1
 8000b0e:	b118      	cbz	r0, 8000b18 <__swsetup_r+0x14>
 8000b10:	6a03      	ldr	r3, [r0, #32]
 8000b12:	b90b      	cbnz	r3, 8000b18 <__swsetup_r+0x14>
 8000b14:	f7ff fd50 	bl	80005b8 <__sinit>
 8000b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b1c:	0719      	lsls	r1, r3, #28
 8000b1e:	d422      	bmi.n	8000b66 <__swsetup_r+0x62>
 8000b20:	06da      	lsls	r2, r3, #27
 8000b22:	d407      	bmi.n	8000b34 <__swsetup_r+0x30>
 8000b24:	2209      	movs	r2, #9
 8000b26:	602a      	str	r2, [r5, #0]
 8000b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b2c:	81a3      	strh	r3, [r4, #12]
 8000b2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b32:	e033      	b.n	8000b9c <__swsetup_r+0x98>
 8000b34:	0758      	lsls	r0, r3, #29
 8000b36:	d512      	bpl.n	8000b5e <__swsetup_r+0x5a>
 8000b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b3a:	b141      	cbz	r1, 8000b4e <__swsetup_r+0x4a>
 8000b3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d002      	beq.n	8000b4a <__swsetup_r+0x46>
 8000b44:	4628      	mov	r0, r5
 8000b46:	f000 f90d 	bl	8000d64 <_free_r>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b4e:	89a3      	ldrh	r3, [r4, #12]
 8000b50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000b54:	81a3      	strh	r3, [r4, #12]
 8000b56:	2300      	movs	r3, #0
 8000b58:	6063      	str	r3, [r4, #4]
 8000b5a:	6923      	ldr	r3, [r4, #16]
 8000b5c:	6023      	str	r3, [r4, #0]
 8000b5e:	89a3      	ldrh	r3, [r4, #12]
 8000b60:	f043 0308 	orr.w	r3, r3, #8
 8000b64:	81a3      	strh	r3, [r4, #12]
 8000b66:	6923      	ldr	r3, [r4, #16]
 8000b68:	b94b      	cbnz	r3, 8000b7e <__swsetup_r+0x7a>
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b74:	d003      	beq.n	8000b7e <__swsetup_r+0x7a>
 8000b76:	4621      	mov	r1, r4
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f000 f83f 	bl	8000bfc <__smakebuf_r>
 8000b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b82:	f013 0201 	ands.w	r2, r3, #1
 8000b86:	d00a      	beq.n	8000b9e <__swsetup_r+0x9a>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60a2      	str	r2, [r4, #8]
 8000b8c:	6962      	ldr	r2, [r4, #20]
 8000b8e:	4252      	negs	r2, r2
 8000b90:	61a2      	str	r2, [r4, #24]
 8000b92:	6922      	ldr	r2, [r4, #16]
 8000b94:	b942      	cbnz	r2, 8000ba8 <__swsetup_r+0xa4>
 8000b96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000b9a:	d1c5      	bne.n	8000b28 <__swsetup_r+0x24>
 8000b9c:	bd38      	pop	{r3, r4, r5, pc}
 8000b9e:	0799      	lsls	r1, r3, #30
 8000ba0:	bf58      	it	pl
 8000ba2:	6962      	ldrpl	r2, [r4, #20]
 8000ba4:	60a2      	str	r2, [r4, #8]
 8000ba6:	e7f4      	b.n	8000b92 <__swsetup_r+0x8e>
 8000ba8:	2000      	movs	r0, #0
 8000baa:	e7f7      	b.n	8000b9c <__swsetup_r+0x98>
 8000bac:	2000000c 	.word	0x2000000c

08000bb0 <__swhatbuf_r>:
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	b096      	sub	sp, #88	@ 0x58
 8000bbc:	4615      	mov	r5, r2
 8000bbe:	461e      	mov	r6, r3
 8000bc0:	da0d      	bge.n	8000bde <__swhatbuf_r+0x2e>
 8000bc2:	89a3      	ldrh	r3, [r4, #12]
 8000bc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000bc8:	f04f 0100 	mov.w	r1, #0
 8000bcc:	bf14      	ite	ne
 8000bce:	2340      	movne	r3, #64	@ 0x40
 8000bd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	6031      	str	r1, [r6, #0]
 8000bd8:	602b      	str	r3, [r5, #0]
 8000bda:	b016      	add	sp, #88	@ 0x58
 8000bdc:	bd70      	pop	{r4, r5, r6, pc}
 8000bde:	466a      	mov	r2, sp
 8000be0:	f000 f8ae 	bl	8000d40 <_fstat_r>
 8000be4:	2800      	cmp	r0, #0
 8000be6:	dbec      	blt.n	8000bc2 <__swhatbuf_r+0x12>
 8000be8:	9901      	ldr	r1, [sp, #4]
 8000bea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000bee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000bf2:	4259      	negs	r1, r3
 8000bf4:	4159      	adcs	r1, r3
 8000bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfa:	e7eb      	b.n	8000bd4 <__swhatbuf_r+0x24>

08000bfc <__smakebuf_r>:
 8000bfc:	898b      	ldrh	r3, [r1, #12]
 8000bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c00:	079d      	lsls	r5, r3, #30
 8000c02:	4606      	mov	r6, r0
 8000c04:	460c      	mov	r4, r1
 8000c06:	d507      	bpl.n	8000c18 <__smakebuf_r+0x1c>
 8000c08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000c0c:	6023      	str	r3, [r4, #0]
 8000c0e:	6123      	str	r3, [r4, #16]
 8000c10:	2301      	movs	r3, #1
 8000c12:	6163      	str	r3, [r4, #20]
 8000c14:	b003      	add	sp, #12
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	ab01      	add	r3, sp, #4
 8000c1a:	466a      	mov	r2, sp
 8000c1c:	f7ff ffc8 	bl	8000bb0 <__swhatbuf_r>
 8000c20:	9f00      	ldr	r7, [sp, #0]
 8000c22:	4605      	mov	r5, r0
 8000c24:	4639      	mov	r1, r7
 8000c26:	4630      	mov	r0, r6
 8000c28:	f7ff fdb2 	bl	8000790 <_malloc_r>
 8000c2c:	b948      	cbnz	r0, 8000c42 <__smakebuf_r+0x46>
 8000c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c32:	059a      	lsls	r2, r3, #22
 8000c34:	d4ee      	bmi.n	8000c14 <__smakebuf_r+0x18>
 8000c36:	f023 0303 	bic.w	r3, r3, #3
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	81a3      	strh	r3, [r4, #12]
 8000c40:	e7e2      	b.n	8000c08 <__smakebuf_r+0xc>
 8000c42:	89a3      	ldrh	r3, [r4, #12]
 8000c44:	6020      	str	r0, [r4, #0]
 8000c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c4a:	81a3      	strh	r3, [r4, #12]
 8000c4c:	9b01      	ldr	r3, [sp, #4]
 8000c4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000c52:	b15b      	cbz	r3, 8000c6c <__smakebuf_r+0x70>
 8000c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c58:	4630      	mov	r0, r6
 8000c5a:	f000 f80b 	bl	8000c74 <_isatty_r>
 8000c5e:	b128      	cbz	r0, 8000c6c <__smakebuf_r+0x70>
 8000c60:	89a3      	ldrh	r3, [r4, #12]
 8000c62:	f023 0303 	bic.w	r3, r3, #3
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	81a3      	strh	r3, [r4, #12]
 8000c6c:	89a3      	ldrh	r3, [r4, #12]
 8000c6e:	431d      	orrs	r5, r3
 8000c70:	81a5      	strh	r5, [r4, #12]
 8000c72:	e7cf      	b.n	8000c14 <__smakebuf_r+0x18>

08000c74 <_isatty_r>:
 8000c74:	b538      	push	{r3, r4, r5, lr}
 8000c76:	4d06      	ldr	r5, [pc, #24]	@ (8000c90 <_isatty_r+0x1c>)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	602b      	str	r3, [r5, #0]
 8000c80:	f7ff fb96 	bl	80003b0 <_isatty>
 8000c84:	1c43      	adds	r3, r0, #1
 8000c86:	d102      	bne.n	8000c8e <_isatty_r+0x1a>
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	b103      	cbz	r3, 8000c8e <_isatty_r+0x1a>
 8000c8c:	6023      	str	r3, [r4, #0]
 8000c8e:	bd38      	pop	{r3, r4, r5, pc}
 8000c90:	200001c4 	.word	0x200001c4

08000c94 <_lseek_r>:
 8000c94:	b538      	push	{r3, r4, r5, lr}
 8000c96:	4d07      	ldr	r5, [pc, #28]	@ (8000cb4 <_lseek_r+0x20>)
 8000c98:	4604      	mov	r4, r0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	602a      	str	r2, [r5, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	f7ff fb8f 	bl	80003c6 <_lseek>
 8000ca8:	1c43      	adds	r3, r0, #1
 8000caa:	d102      	bne.n	8000cb2 <_lseek_r+0x1e>
 8000cac:	682b      	ldr	r3, [r5, #0]
 8000cae:	b103      	cbz	r3, 8000cb2 <_lseek_r+0x1e>
 8000cb0:	6023      	str	r3, [r4, #0]
 8000cb2:	bd38      	pop	{r3, r4, r5, pc}
 8000cb4:	200001c4 	.word	0x200001c4

08000cb8 <_read_r>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4d07      	ldr	r5, [pc, #28]	@ (8000cd8 <_read_r+0x20>)
 8000cbc:	4604      	mov	r4, r0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	602a      	str	r2, [r5, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f7ff fb1d 	bl	8000306 <_read>
 8000ccc:	1c43      	adds	r3, r0, #1
 8000cce:	d102      	bne.n	8000cd6 <_read_r+0x1e>
 8000cd0:	682b      	ldr	r3, [r5, #0]
 8000cd2:	b103      	cbz	r3, 8000cd6 <_read_r+0x1e>
 8000cd4:	6023      	str	r3, [r4, #0]
 8000cd6:	bd38      	pop	{r3, r4, r5, pc}
 8000cd8:	200001c4 	.word	0x200001c4

08000cdc <_sbrk_r>:
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4d06      	ldr	r5, [pc, #24]	@ (8000cf8 <_sbrk_r+0x1c>)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	4604      	mov	r4, r0
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	602b      	str	r3, [r5, #0]
 8000ce8:	f7ff fb7a 	bl	80003e0 <_sbrk>
 8000cec:	1c43      	adds	r3, r0, #1
 8000cee:	d102      	bne.n	8000cf6 <_sbrk_r+0x1a>
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	b103      	cbz	r3, 8000cf6 <_sbrk_r+0x1a>
 8000cf4:	6023      	str	r3, [r4, #0]
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}
 8000cf8:	200001c4 	.word	0x200001c4

08000cfc <_write_r>:
 8000cfc:	b538      	push	{r3, r4, r5, lr}
 8000cfe:	4d07      	ldr	r5, [pc, #28]	@ (8000d1c <_write_r+0x20>)
 8000d00:	4604      	mov	r4, r0
 8000d02:	4608      	mov	r0, r1
 8000d04:	4611      	mov	r1, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	602a      	str	r2, [r5, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	f7ff fb18 	bl	8000340 <_write>
 8000d10:	1c43      	adds	r3, r0, #1
 8000d12:	d102      	bne.n	8000d1a <_write_r+0x1e>
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	b103      	cbz	r3, 8000d1a <_write_r+0x1e>
 8000d18:	6023      	str	r3, [r4, #0]
 8000d1a:	bd38      	pop	{r3, r4, r5, pc}
 8000d1c:	200001c4 	.word	0x200001c4

08000d20 <_close_r>:
 8000d20:	b538      	push	{r3, r4, r5, lr}
 8000d22:	4d06      	ldr	r5, [pc, #24]	@ (8000d3c <_close_r+0x1c>)
 8000d24:	2300      	movs	r3, #0
 8000d26:	4604      	mov	r4, r0
 8000d28:	4608      	mov	r0, r1
 8000d2a:	602b      	str	r3, [r5, #0]
 8000d2c:	f7ff fb24 	bl	8000378 <_close>
 8000d30:	1c43      	adds	r3, r0, #1
 8000d32:	d102      	bne.n	8000d3a <_close_r+0x1a>
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	b103      	cbz	r3, 8000d3a <_close_r+0x1a>
 8000d38:	6023      	str	r3, [r4, #0]
 8000d3a:	bd38      	pop	{r3, r4, r5, pc}
 8000d3c:	200001c4 	.word	0x200001c4

08000d40 <_fstat_r>:
 8000d40:	b538      	push	{r3, r4, r5, lr}
 8000d42:	4d07      	ldr	r5, [pc, #28]	@ (8000d60 <_fstat_r+0x20>)
 8000d44:	2300      	movs	r3, #0
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	602b      	str	r3, [r5, #0]
 8000d4e:	f7ff fb1f 	bl	8000390 <_fstat>
 8000d52:	1c43      	adds	r3, r0, #1
 8000d54:	d102      	bne.n	8000d5c <_fstat_r+0x1c>
 8000d56:	682b      	ldr	r3, [r5, #0]
 8000d58:	b103      	cbz	r3, 8000d5c <_fstat_r+0x1c>
 8000d5a:	6023      	str	r3, [r4, #0]
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001c4 	.word	0x200001c4

08000d64 <_free_r>:
 8000d64:	b538      	push	{r3, r4, r5, lr}
 8000d66:	4605      	mov	r5, r0
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d041      	beq.n	8000df0 <_free_r+0x8c>
 8000d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d70:	1f0c      	subs	r4, r1, #4
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	bfb8      	it	lt
 8000d76:	18e4      	addlt	r4, r4, r3
 8000d78:	f7ff fe36 	bl	80009e8 <__malloc_lock>
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <_free_r+0x90>)
 8000d7e:	6813      	ldr	r3, [r2, #0]
 8000d80:	b933      	cbnz	r3, 8000d90 <_free_r+0x2c>
 8000d82:	6063      	str	r3, [r4, #4]
 8000d84:	6014      	str	r4, [r2, #0]
 8000d86:	4628      	mov	r0, r5
 8000d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d8c:	f7ff be32 	b.w	80009f4 <__malloc_unlock>
 8000d90:	42a3      	cmp	r3, r4
 8000d92:	d908      	bls.n	8000da6 <_free_r+0x42>
 8000d94:	6820      	ldr	r0, [r4, #0]
 8000d96:	1821      	adds	r1, r4, r0
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf01      	itttt	eq
 8000d9c:	6819      	ldreq	r1, [r3, #0]
 8000d9e:	685b      	ldreq	r3, [r3, #4]
 8000da0:	1809      	addeq	r1, r1, r0
 8000da2:	6021      	streq	r1, [r4, #0]
 8000da4:	e7ed      	b.n	8000d82 <_free_r+0x1e>
 8000da6:	461a      	mov	r2, r3
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	b10b      	cbz	r3, 8000db0 <_free_r+0x4c>
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d9fa      	bls.n	8000da6 <_free_r+0x42>
 8000db0:	6811      	ldr	r1, [r2, #0]
 8000db2:	1850      	adds	r0, r2, r1
 8000db4:	42a0      	cmp	r0, r4
 8000db6:	d10b      	bne.n	8000dd0 <_free_r+0x6c>
 8000db8:	6820      	ldr	r0, [r4, #0]
 8000dba:	4401      	add	r1, r0
 8000dbc:	1850      	adds	r0, r2, r1
 8000dbe:	4283      	cmp	r3, r0
 8000dc0:	6011      	str	r1, [r2, #0]
 8000dc2:	d1e0      	bne.n	8000d86 <_free_r+0x22>
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	6053      	str	r3, [r2, #4]
 8000dca:	4408      	add	r0, r1
 8000dcc:	6010      	str	r0, [r2, #0]
 8000dce:	e7da      	b.n	8000d86 <_free_r+0x22>
 8000dd0:	d902      	bls.n	8000dd8 <_free_r+0x74>
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	602b      	str	r3, [r5, #0]
 8000dd6:	e7d6      	b.n	8000d86 <_free_r+0x22>
 8000dd8:	6820      	ldr	r0, [r4, #0]
 8000dda:	1821      	adds	r1, r4, r0
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	bf04      	itt	eq
 8000de0:	6819      	ldreq	r1, [r3, #0]
 8000de2:	685b      	ldreq	r3, [r3, #4]
 8000de4:	6063      	str	r3, [r4, #4]
 8000de6:	bf04      	itt	eq
 8000de8:	1809      	addeq	r1, r1, r0
 8000dea:	6021      	streq	r1, [r4, #0]
 8000dec:	6054      	str	r4, [r2, #4]
 8000dee:	e7ca      	b.n	8000d86 <_free_r+0x22>
 8000df0:	bd38      	pop	{r3, r4, r5, pc}
 8000df2:	bf00      	nop
 8000df4:	200001c0 	.word	0x200001c0

08000df8 <_init>:
 8000df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfa:	bf00      	nop
 8000dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dfe:	bc08      	pop	{r3}
 8000e00:	469e      	mov	lr, r3
 8000e02:	4770      	bx	lr

08000e04 <_fini>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	bf00      	nop
 8000e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0a:	bc08      	pop	{r3}
 8000e0c:	469e      	mov	lr, r3
 8000e0e:	4770      	bx	lr
